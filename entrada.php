<?php
require_once 'config.php';
require_once 'funciones.php';

// Iniciar sesi√≥n si no est√° iniciada
if (session_status() == PHP_SESSION_NONE) {
    session_start();
}

// Establecer tiempo de inactividad permitido (2,5 minutos = 150 segundos)
$tiempo_limite_inactividad = 150;

// Funci√≥n para verificar si el usuario es administrador
function esAdministrador() {
    return isset($_SESSION['usuario_rol']) && $_SESSION['usuario_rol'] === 'admin';
}

// Funci√≥n para verificar la inactividad y gestionar la sesi√≥n
function verificarInactividad($tiempo_limite) {
    // Si no hay sesi√≥n iniciada o es administrador, no verificar inactividad
    if (!isset($_SESSION['usuario_id']) || esAdministrador()) {
        return;
    }

    // Si no existe tiempo de √∫ltima actividad, establecerlo
    if (!isset($_SESSION['tiempo_ultima_actividad'])) {
        $_SESSION['tiempo_ultima_actividad'] = time();
        return;
    }

    // Calcular tiempo transcurrido
    $tiempo_transcurrido = time() - $_SESSION['tiempo_ultima_actividad'];

    // Si excede el l√≠mite, cerrar sesi√≥n
    if ($tiempo_transcurrido > $tiempo_limite) {
        // Guardar mensaje antes de destruir la sesi√≥n
        $mensaje = 'Tu sesi√≥n ha expirado por inactividad.';
        
        // Limpiar variables de sesi√≥n pero mantener el mensaje
        $_SESSION = array();
        
        // Destruir la cookie de sesi√≥n si existe
        if (isset($_COOKIE[session_name()])) {
            setcookie(session_name(), '', time() - 3600, '/');
        }
        
        // Destruir la sesi√≥n
        session_destroy();
        
        // Iniciar nueva sesi√≥n para el mensaje
        session_start();
        $_SESSION['mensaje'] = $mensaje;
        $_SESSION['tipo_mensaje'] = 'warning';
        
        // Redirigir a login.php
        header('Location: login.php');
        exit();
    }
}

// Funci√≥n para actualizar el tiempo de √∫ltima actividad
function actualizarTiempoActividad() {
    if (isset($_SESSION['usuario_id']) && !esAdministrador()) {
        $_SESSION['tiempo_ultima_actividad'] = time();
    }
}

// Si es una solicitud AJAX para actualizar el tiempo de actividad
if (isset($_GET['actualizar_actividad']) && $_SERVER['REQUEST_METHOD'] === 'POST') {
    actualizarTiempoActividad();
    header('Content-Type: application/json');
    echo json_encode(['status' => 'success']);
    exit();
}

// Verificar inactividad
verificarInactividad($tiempo_limite_inactividad);

// Actualizar tiempo de actividad en acciones espec√≠ficas
if ($_SERVER['REQUEST_METHOD'] === 'POST' || !empty($_GET) || 
    (isset($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) === 'xmlhttprequest') ||
    isset($_SERVER['HTTP_REFERER'])) {
    actualizarTiempoActividad();
}

// Verificar acceso
if (!esEditor() && !esUsuario()) {
    // Si no es editor (por IP) y no ha iniciado sesi√≥n como usuario, redirigir a login.php
    redirigir('login.php', 'Debes iniciar sesi√≥n para acceder al blog.', 'warning');
    exit();
}

// Obtener el slug de la entrada desde la URL
$slug = filter_input(INPUT_GET, 'slug', FILTER_SANITIZE_FULL_SPECIAL_CHARS);
if (!$slug) {
    redirigir('index.php', 'Entrada no especificada.', 'error');
    exit();
}

// Obtener la entrada
$entrada = obtenerEntrada($slug);
if (!$entrada) {
    redirigir('index.php', 'La entrada no existe.', 'error');
    exit();
}

// Obtener las entradas para navegaci√≥n
$allEntries = obtenerEntradas();
$currentIndex = array_search($entrada, $allEntries);

$previousEntry = $currentIndex < count($allEntries) - 1 ? $allEntries[$currentIndex + 1] : null;
$nextEntry = $currentIndex > 0 ? $allEntries[$currentIndex - 1] : null;

// Procesar comentario si se env√≠a el formulario
$errorComentario = '';
if ($_SERVER['REQUEST_METHOD'] === 'POST' && !isset($_GET['actualizar_actividad'])) {
    // Verificar token CSRF
    if (!isset($_POST['csrf_token']) || $_POST['csrf_token'] !== $_SESSION['csrf_token']) {
        die('Error de validaci√≥n CSRF');
    }

    $comentarioTexto = trim($_POST['comentario']);
    $comentarioTexto = strip_tags($comentarioTexto); // Eliminar etiquetas HTML

    if (empty($comentarioTexto)) {
        $errorComentario = 'El comentario no puede estar vac√≠o.';
    } else {
        $comentario = [
            'usuario' => $_SESSION['usuario'] ?? 'An√≥nimo',
            'fecha' => date('Y-m-d H:i:s'),
            'texto' => $comentarioTexto,
            'entrada_slug' => $slug
        ];
        try {
            guardarComentario($slug, $comentario);
            // Regenerar el ID de sesi√≥n despu√©s de una acci√≥n importante
            session_regenerate_id(true);
            redirigir("entrada.php?slug=" . urlencode($slug), 'Comentario agregado exitosamente.', 'success');
        } catch (Exception $e) {
            $errorComentario = 'Error al guardar el comentario: ' . htmlspecialchars($e->getMessage(), ENT_QUOTES, 'UTF-8');
        }
    }
}

// Obtener los comentarios de la entrada
$comentarios = obtenerComentarios($slug);

// Generar un nuevo token CSRF
$_SESSION['csrf_token'] = bin2hex(random_bytes(32));

// Incluir el header
$titulo_pagina = htmlspecialchars($entrada['titulo'], ENT_QUOTES, 'UTF-8');
include 'header.php';
?>

<div class="entrada-container">
    <article class="entrada-detalle">
        <h1><?= $titulo_pagina ?></h1>
        <p>
            <small>Por <?= htmlspecialchars($entrada['autor'] ?? 'An√≥nimo', ENT_QUOTES, 'UTF-8') ?> el <?= date('d/m/Y', strtotime($entrada['fecha'])) ?></small>
        </p>
        <div class="contenido">
            <?php
            // Corregir rutas de im√°genes en el contenido
            $contenido = htmlspecialchars_decode($entrada['contenido']);
            // Ajustar rutas de im√°genes relativas
            $contenido = preg_replace_callback('/src="(?!http)([^"]+)"/i', function($matches) {
                $src = $matches[1];
                // Si la ruta no comienza con '/', agregar '/'
                if ($src[0] !== '/') {
                    $src = '/' . $src;
                }
                return 'src="' . htmlspecialchars(URL_BASE . $src, ENT_QUOTES, 'UTF-8') . '"';
            }, $contenido);
            echo $contenido;
            ?>
        </div>

        <!-- Botones de navegaci√≥n entre entradas -->
        <div class="navegacion-entradas">
            <?php if ($previousEntry): ?>
                <a href="entrada.php?slug=<?= urlencode($previousEntry['slug']) ?>" class="button">‚üµ Entrada anterior</a>
            <?php endif; ?>
            <?php if ($nextEntry): ?>
                <a href="entrada.php?slug=<?= urlencode($nextEntry['slug']) ?>" class="button">Entrada siguiente ‚ü∂</a>
            <?php endif; ?>
        </div>

        <?php if (esEditor()): ?>
            <a href="editar_entrada.php?slug=<?= urlencode($entrada['slug']) ?>" class="button">Editar Entrada</a>
        <?php endif; ?>
    </article>

    <section class="comentarios">
        <h2>Comentarios</h2>
        <?php if (!empty($comentarios)): ?>
            <?php foreach ($comentarios as $comentario): ?>
                <div class="comentario">
                    <p><strong><?= htmlspecialchars($comentario['usuario'], ENT_QUOTES, 'UTF-8') ?></strong> el <?= date('d/m/Y H:i', strtotime($comentario['fecha'])) ?></p>
                    <p><?= nl2br(htmlspecialchars($comentario['texto'], ENT_QUOTES, 'UTF-8')) ?></p>
                </div>
            <?php endforeach; ?>
        <?php else: ?>
            <p>No hay comentarios a√∫n. ¬°S√© el primero en comentar!</p>
        <?php endif; ?>
        <h3>Agregar un comentario</h3>
        <?php if (!empty($errorComentario)): ?>
            <div class="mensaje error"><?= htmlspecialchars($errorComentario, ENT_QUOTES, 'UTF-8') ?></div>
        <?php endif; ?>
        <form method="post" action="<?= htmlspecialchars($_SERVER['PHP_SELF']) ?>?slug=<?= urlencode($slug) ?>" accept-charset="UTF-8">
            <input type="hidden" name="csrf_token" value="<?= $_SESSION['csrf_token'] ?>">
            <label for="comentario">Comentario:</label>
            <textarea name="comentario" id="comentario" rows="5" required></textarea>

            <!-- Bot√≥n para mostrar/ocultar los emojis -->
            <button type="button" id="toggle-emojis" class="button">Emojis</button>

            <!-- Selector de emojis -->
            <div class="emoji-selector" id="emoji-selector" style="display: none;">
                <?php
            // Categor√≠as de emojis organizados en arrays
                $emojisPorCategoria = [
                    "Caritas felices" => ['üòÄ','üòÅ','üòÇ','ü§£','üòÉ','üòÑ','üòÖ','üòÜ','üòâ','üòä','üòã','üòç','ü•∞','üòò','üòó','üòô','üòö','üôÇ','ü§ó','ü§©','üòá','ü•≥'],
                    "Caritas con accesorios" => ['üò∑','ü§†','üòé','üßê','ü§ì','ü•∏'],
                    "Caritas de salud y malestar" => ['ü§¢','ü§Æ','ü§ß','üò∑','ü§í','ü§ï','ü•µ','ü•∂','ü•¥','üòµ','üòµ‚Äçüí´','ü´†','üò™','üò¥','ü§ê','üòÆ‚Äçüí®'],
                    "Caritas pensativas y sugerentes" => ['ü§î','ü§®','üòê','üòë','üò∂','üôÑ','üòè','üòí','üòå','üßê','üò¨','ü§•'],
                    "Caritas de frustraci√≥n y tristeza" => ['‚òπÔ∏è','üôÅ','üòï','üòü','üòî','üòû','üò£','üòñ','üò´','üò©','ü•∫','üò¢','üò≠','üò§','üò†','üò°','ü§¨','üò±','üò®','üò∞','üò•','üòì','ü§Ø'],
                    "Caritas de sorpresa y asombro" => ['üòÆ','üòØ','üò≤','üò≥','üò¶','üòß','üò®','ü´¢','ü´£'],
                    "Animales terrestres" => ['üê∂','üê±','üê≠','üêπ','üê∞','ü¶ä','üêª','üêº','üê®','üêØ','ü¶Å','üêÆ','üê∑','üê∏','üêµ','ü¶ç','ü¶ß','üêÜ','üêÖ','ü¶ì','üêò','ü¶è','ü¶í','üêä','ü¶ò'],
                    "Animales marinos" => ['ü¶à','üê¨','üê≥','üêô','ü¶ë'],
                    "Aves e insectos" => ['üêî','üêß','üê¶','üê§','üê£','üê•','ü¶ã'],
                    "Animales mitol√≥gicos o extintos" => ['ü¶Ñ','ü¶ñ','ü¶ï','üêâ','üê≤'],
                    "Plantas y flores" => ['üåµ','üéÑ','üå≤','üå≥','üå¥','üå±','üåø','‚òòÔ∏è','üçÄ','üéç','üéã','üçÉ','üçÇ','üçÅ','üçÑ','üåæ','üíê','üå∑','üåπ','ü•Ä','üå∫','üå∏','üåº','üåª','ü™¥'],
                    "Frutas y verduras" => ['üçá','üçà','üçâ','üçä','üçã','üçå','üçç','ü•≠','üçé','üçè','üçê','üçë','üçí','üçì','ü´ê','ü•ù','üçÖ','ü´í','ü•ë','ü•¶','ü•¨','ü•í','üå∂Ô∏è','ü´ë','ü•ï','üßÑ','üßÖ','ü•î','üçÜ','ü•ú','üå∞'],
                    "Comida y bebidas" => ['üçî','üçü','üçï','üå≠','ü•™','üåÆ','üåØ','ü´î','ü•ô','üßÜ','ü•ö','üç≥','ü•ò','üç≤','ü•£','ü•ó','üçø','üßà','üßÇ','ü•´','üç¶','üçß','üç®','üç©','üç™','üéÇ','üç∞','üßÅ','ü•ß','üç´','üç¨','üç≠','üçÆ','üçØ','‚òï','ü´ñ','üçµ','üßÉ','ü•õ','üçº','üßã','üßâ','üç∂','üçæ','üç∑','üç∏','üçπ','üç∫','üçª','ü•Ç','ü•É','ü•§'],
                    "Clima y fen√≥menos naturales" => ['‚òÄÔ∏è','üå§Ô∏è','‚õÖ','üå•Ô∏è','‚òÅÔ∏è','üå¶Ô∏è','üåßÔ∏è','‚õàÔ∏è','üå©Ô∏è','üå®Ô∏è','‚ùÑÔ∏è','‚òÉÔ∏è','‚õÑ','üå¨Ô∏è','üí®','üå™Ô∏è','üå´Ô∏è','üåà','üî•','üí•','‚òî','‚ö°','üåä','üåã'],
                    "Corazones y s√≠mbolos de amor" => ['‚ù§Ô∏è','üß°','üíõ','üíö','üíô','üíú','üñ§','ü§ç','ü§é','üíî','‚ù£Ô∏è','üíï','üíû','üíì','üíó','üíñ','üíò','üíù','üíü','üíå','ü´∂'],
                    "S√≠mbolos de estados y efectos" => ['‚ú®','üí´','üí•','üí¶','üí®','üí¢','üï≥Ô∏è','üí§','„Ä∞Ô∏è'],
                    "S√≠mbolos musicales" => ['üéµ','üé∂'],
                    "Transporte terrestre" => ['üöó','üöï','üöô','üöå','üöé','üèéÔ∏è','üöì','üöë','üöí','üöê','üöö','üöõ','üöú','üèçÔ∏è','üõµ','üö≤','üõ¥','üöÇ','üöÜ','üöä','üöâ','üöù','üö°','üö†'],
                    "Transporte a√©reo" => ['‚úàÔ∏è','üõ´','üõ¨','üõ©Ô∏è','üöÅ'],
                    "Transporte acu√°tico" => ['üõ≥Ô∏è','‚õ¥Ô∏è','üö¢','üõ∂','‚õµ','üö§','üõ•Ô∏è','‚öì'],
                    "Espacio y astronom√≠a" => ['üåç','üåé','üåè','üåû','üå†','üåå','‚òÑÔ∏è','üöÄ','üë®‚ÄçüöÄ','üë©‚ÄçüöÄ','üõ∏','üõ∞Ô∏è'],
                    "Cuerpos celestes y fen√≥menos espaciales" => ['üåï','üåñ','üåó','üåò','üåë','üåí','üåì','üåî','üåö','üåù'],
                    "Deportes y actividades f√≠sicas" => ['‚öΩ','üèÄ','üèà','‚öæ','ü•é','üéæ','üèê','üèâ','ü•è','üèä','üèÑ','üö£','üé£','ü§ø','‚õ∑Ô∏è','üèÇ','üõ∑','‚õ∏Ô∏è','üèí','ü•å','üèì','üè∏','ü•ä','ü•ã','üèπ','üé≥','üèè','üèë','ü•ç','üö¥','ü§∏','ü§º','ü§æ','ü§π','üéΩ'],
                    "Tecnolog√≠a personal y electr√≥nica" => ['üì±','üíª','‚å®Ô∏è','üñ•Ô∏è','üñ®Ô∏è','üì∑','üìπ','üé•','üì∫','üìª','üéôÔ∏è','üéöÔ∏è','üéõÔ∏è','üì°','üîã','üîå','üí°','üî¶','üïØÔ∏è'],
                    "Objetos cotidianos" => ['üìö','üìñ','üñäÔ∏è','‚úèÔ∏è','üîç','üîë','üóùÔ∏è','üß∏','ü™ë','üõèÔ∏è','üõãÔ∏è','üö™','ü™û','ü™ü','üß∫','üßª','üßº','üßΩ','üß¥','üõÅ','üöø','üöΩ','üßπ','üß∂','üßµ','ü™°','üëì','üï∂Ô∏è','ü•Ω','üß≥'],
                    "Banderas y s√≠mbolos internacionales" => ['üè≥Ô∏è','üè¥','üèÅ','üö©','üè≥Ô∏è‚Äçüåà','üè≥Ô∏è‚Äç‚ößÔ∏è','üá∫üá≥'],
                    "S√≠mbolos de advertencia y regulaci√≥n" => ['‚ôªÔ∏è','‚öúÔ∏è','üî±','üìõ','üî∞','‚≠ï','‚úÖ','‚ùå','‚ùì','‚ùó','„ÄΩÔ∏è','‚ö†Ô∏è','üö∏','‚ò¢Ô∏è','‚ò£Ô∏è','üÜö','üö´','üö≠','üöØ','üö≥','üö±','üö∑'],
                    "Manos y gestos" => ['üëç','üëé','üëå','ü§å','ü§è','‚úåÔ∏è','ü§û','ü§ü','ü§ò','ü§ô','üëà','üëâ','üëÜ','üëá','‚òùÔ∏è','üëã','ü§ö','üñêÔ∏è','‚úã','üññ','üëè','üôå','üëê','ü§≤','ü§ù','üôè','‚úçÔ∏è','ü´∞','ü´∂','ü´∑','ü´∏'],
                    "Festividades" => ['üéÑ','üéÅ','üéâ','üéä','üéá','üéÜ','üß®','üéà','ü•≥','üéÇ','üéÉ','ü™î','üïé','üéÖ','ü§∂','üßë‚ÄçüéÑ','ü¶É','üéê','üéè'],
                    "Profesiones y ocupaciones" => ['üë®‚Äç‚öïÔ∏è','üë©‚Äç‚öïÔ∏è','üë®‚Äçüè´','üë©‚Äçüè´','üë®‚Äçüíª','üë©‚Äçüíª','üë®‚Äçüåæ','üë©‚Äçüåæ','üë®‚Äçüç≥','üë©‚Äçüç≥','üë®‚Äçüîß','üë©‚Äçüîß','üë®‚Äçüè≠','üë©‚Äçüè≠','üë®‚Äçüöí','üë©‚Äçüöí','üëÆ‚Äç‚ôÇÔ∏è','üëÆ‚Äç‚ôÄÔ∏è','üë®‚Äç‚úàÔ∏è','üë©‚Äç‚úàÔ∏è','üßë‚Äç‚öñÔ∏è','üë®‚Äç‚öñÔ∏è','üë©‚Äç‚öñÔ∏è','üë®‚ÄçüöÄ','üë©‚ÄçüöÄ','üë®‚Äçüé®','üë©‚Äçüé®','üë®‚Äçüî¨','üë©‚Äçüî¨','üë®‚Äçüé§','üë©‚Äçüé§','üë®‚Äçü¶≥','üë©‚Äçü¶≥','üßë‚Äçüîß']
                ];
                ?>
                <?php foreach ($emojisPorCategoria as $categoria => $emojis): ?>
                    <div class="emoji-category">
                        <h4><?= htmlspecialchars($categoria, ENT_QUOTES, 'UTF-8') ?></h4>
                        <div class="emoji-container" style="display: none;">
                            <?php foreach ($emojis as $emoji): ?>
                                <span class="emoji" data-emoji="<?= htmlspecialchars($emoji, ENT_QUOTES, 'UTF-8') ?>"><?= htmlspecialchars($emoji, ENT_QUOTES, 'UTF-8') ?></span>
                            <?php endforeach; ?>
                        </div>
                    </div>
                <?php endforeach; ?>
            </div>

            <button type="submit" class="button">Enviar Comentario</button>
        </form>
    </section>

    <!-- Entradas recientes -->
    <section class="entradas-recientes">
        <h2>Entradas Recientes</h2>
        <div class="lista-entradas-recientes">
            <?php
            $entradasRecientes = array_slice($allEntries, 0, 5);
            foreach ($entradasRecientes as $entry):
                $entrySlug = $entry['slug'];
                $entryTitulo = htmlspecialchars($entry['titulo'], ENT_QUOTES, 'UTF-8');
                $entryFecha = date('d/m/Y', strtotime($entry['fecha']));
                // Extraer la primera imagen del contenido
                $entryContenido = htmlspecialchars_decode($entry['contenido']);
                $imagenSrc = extraerPrimeraImagen($entryContenido);
                if ($imagenSrc) {
                    // Construir URL absoluta de la imagen
                    $imagenUrl = construirUrlImagen($imagenSrc);
                }
                ?>
                <div class="entrada-resumen">
                    <a href="entrada.php?slug=<?= urlencode($entrySlug) ?>">
                        <?php if ($imagenSrc): ?>
                            <img src="<?= htmlspecialchars($imagenUrl, ENT_QUOTES, 'UTF-8') ?>" alt="Imagen de <?= $entryTitulo ?>" style="width: 100px; height: auto;" loading="lazy">
                        <?php else: ?>
                            <img src="<?= htmlspecialchars(URL_BASE . '/ruta/a/imagen_predeterminada.jpg', ENT_QUOTES, 'UTF-8') ?>" alt="Imagen predeterminada" style="width: 100px; height: auto;" loading="lazy">
                        <?php endif; ?>
                        <h3><?= $entryTitulo ?></h3>
                        <p><small><?= $entryFecha ?></small></p>
                    </a>
                </div>
            <?php endforeach; ?>
        </div>
    </section>
</div>

<!-- Estilos adicionales para el bot√≥n y el selector de emojis -->
<style>
    /* Estilos para el bot√≥n de mostrar/ocultar emojis */
    #toggle-emojis {
        margin-top: 10px;
    }
    /* Estilos para la selecci√≥n de emojis */
    .emoji-selector {
        margin-top: 10px;
        background-color: #f8f9fa;
        padding: 10px;
        border: 1px solid #ddd;
        max-height: 300px;
        overflow-y: auto;
    }
    .emoji-category {
        margin-bottom: 10px;
    }
    .emoji-category h4 {
        margin: 0;
        cursor: pointer;
        background-color: #e9ecef;
        padding: 5px;
        border-radius: 3px;
    }
    .emoji-container {
        display: flex;
        flex-wrap: wrap;
        padding: 5px 0;
    }
    .emoji {
        font-size: 24px;
        margin: 3px;
        cursor: pointer;
    }
</style>

<script>
    // JavaScript para manejar la interacci√≥n con las categor√≠as y emojis

    // Mostrar/ocultar el selector completo de emojis al hacer clic en el bot√≥n
    document.getElementById('toggle-emojis').addEventListener('click', () => {
        const emojiSelector = document.getElementById('emoji-selector');
        emojiSelector.style.display = emojiSelector.style.display === 'none' || emojiSelector.style.display === '' ? 'block' : 'none';
    });

    // Mostrar/ocultar emojis al hacer clic en las categor√≠as
    document.querySelectorAll('.emoji-category h4').forEach(categoryHeader => {
        categoryHeader.addEventListener('click', () => {
            const container = categoryHeader.nextElementSibling;
            container.style.display = container.style.display === 'none' ? 'flex' : 'none';
        });
    });

    // Agregar emoji al comentario al hacer clic
    document.querySelectorAll('.emoji').forEach(emoji => {
        emoji.addEventListener('click', event => {
            const emojiChar = event.target.getAttribute('data-emoji');
            const textarea = document.getElementById('comentario');
            textarea.value += emojiChar;
            textarea.focus();
        });
    });

    // Funci√≥n para actualizar el tiempo de √∫ltima actividad mediante una solicitud AJAX
    document.addEventListener('DOMContentLoaded', function() {
        // Variables para el control de inactividad
        let tiempoUltimaActividad = Date.now();
        const intervaloActualizacion = 30000; // 30 segundos
        const tiempoLimiteInactividad = <?php echo $tiempo_limite_inactividad * 1000; ?>; // Convertir a milisegundos
        let temporizadorInactividad;
        
        // Funci√≥n para actualizar el tiempo de actividad
        async function actualizarActividad() {
            const ahora = Date.now();
            if (ahora - tiempoUltimaActividad >= intervaloActualizacion) {
                tiempoUltimaActividad = ahora;
                try {
                    const response = await fetch('entrada.php?actualizar_actividad=1', {
                        method: 'POST',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });
                    
                    if (!response.ok) {
                        throw new Error('Error en la actualizaci√≥n de actividad');
                    }
                    
                    const data = await response.json();
                    if (data.status !== 'success') {
                        window.location.href = 'login.php';
                    }
                } catch (error) {
                    console.error('Error:', error);
                }
            }
        }

        // Funci√≥n para reiniciar el temporizador de inactividad
        function reiniciarTemporizadorInactividad() {
            clearTimeout(temporizadorInactividad);
            temporizadorInactividad = setTimeout(() => {
                window.location.href = 'login.php';
            }, tiempoLimiteInactividad);
            actualizarActividad();
        }

        // Eventos para detectar actividad del usuario
        const eventos = ['mousemove', 'keypress', 'scroll', 'click', 'touchstart'];
        eventos.forEach(evento => {
            document.addEventListener(evento, reiniciarTemporizadorInactividad);
        });

        // Iniciar el temporizador
        reiniciarTemporizadorInactividad();

        // Verificar peri√≥dicamente la sesi√≥n
        setInterval(actualizarActividad, intervaloActualizacion);
    });
</script>

<?php 
// Funci√≥n para extraer la primera imagen del contenido
function extraerPrimeraImagen($contenido) {
    $dom = new DOMDocument();
    libxml_use_internal_errors(true);
    $dom->loadHTML('<?xml encoding="UTF-8">' . mb_convert_encoding($contenido, 'HTML-ENTITIES', 'UTF-8'));
    libxml_clear_errors();
    $imagenes = $dom->getElementsByTagName('img');
    return $imagenes->length > 0 ? $imagenes->item(0)->getAttribute('src') : '';
}

// Funci√≥n para construir la URL absoluta de una imagen
function construirUrlImagen($src) {
    // Verificar si la ruta ya es absoluta
    if (filter_var($src, FILTER_VALIDATE_URL)) {
        return $src;
    }
    // Asegurarse de que la ruta comience con '/'
    $src = '/' . ltrim($src, '/');
    return rtrim(URL_BASE, '/') . $src;
}

include 'footer.php'; 
?>
